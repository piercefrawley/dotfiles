UserRole.includes(:login_informations).for_provider_with_ancestors(provider)
UserRole.includes(:login_informations).for_provider_with_ancestors(provider).class
UserRole.includes(:login_informations).for_provider_with_ancestors(provider).order("LOWER(name)")
exit
item
local_assigns
exit
render_to_string partial: '/utilities/lists/multicolumn_list_item'
@item
render_to_string partial: '/utilities/lists/multicolumn_list_item'
item
local_assigns
exit
render_ partial: '/utilities/lists/multicolumn_list_item'
render_to_string partial: '/utilities/lists/multicolumn_list_item', locales: { item: @item, columns: [:name] }
item
local_assigns
column
exit
exit; exit
exit
exit; exit
domain
exit
quit
params
exit
@location
step
quit-all
quit
@item
step
quit
self.company.name
quit
test
step
test
step
test
quit-all
quit
test
quit
test
self.company.name
step
step 5
back
backtrace
up
iquit
quit
test
self.company.name
divison
division
division.blank
division.blank?
quit
quit -all
exit
quit
quit all
quit -all
quit --all
exit
stylesheets
exit
other_tools
exigt
quit
other_tools
quit
rfi
rfi.class
rfi_thread
rfi_thread.rfi
rfi.threads
rfi.rfi_threads
rfi.rfi_log_rfi_threads
rfi.rfi_threads
envelope
mail
RfiMailer
RfiMailer.new_rfi
RfiMailer.new_rfi(envelope)
RfiMailer.new_rfi(envelope, nil, nil)
GenericProcoreMailer
GenericProcoreMailer.new
GenericProcoreMailer.generate_email
GenericProcoreMailer.generate_email(envelope, nil)
exit
quit
deliverable?
self
whereami
@mailmessage.deliver
@mail_message.deliver
deliverable?
n
e
Exception
n
e
exit
ProcoreEmail.rfi_new(RfiLog::Rfi.last.id, LoginInformation.last.id)
exit
ProcoreEmail.rfi_new(RfiLog::Rfi.last.id, LoginInformation.last.id)
quit
ProcoreEmail.rfi_new(RfiLog::Rfi.last.id, LoginInformation.last.id)
ProcoreEmail.rfi_new_single_email(RfiLog::Rfi.last.id, 
  quit
ProcoreEmail.rfi_reply(RfiLog::Rfi.last.id, LoginInformation.last.id)
ProcoreEmail.rfi_reply_single_email(RfiLog::Rfi.last.id, LoginInformation.last.id)
ProcoreEmail.rfi_reply_single_email(RfiLog::Rfi.last.id, LoginInformation.first.id, LoginInformation.last.id)
RfiLog::Rfi.last
.project
RfiLog::Rfi.last.project
email = ProcoreEmail.rfi_reply_single_email(RfiLog::Rfi.last.id, LoginInformation.first.id, LoginInformation.last.id)
email.deliver
email.to = 'patrick@procore.com'
email.deliver
email.deliver!
ProcoreEmail.rfi_accepted(RfiLog::Rfi.last.id, RfiLog::RfiThread.last.id, LoginInformation.last.id)
ProcoreEmail.rfi_reopen(RfiLog::Rfi.last.id, LoginInformation.last.id)
ProcoreEmail.rfi_due_date_changed(RfiLog::Rfi)
ProcoreEmail.all_rfi_overdue_digest_emails
ProcoreEmail.rfi_due_date_changed(RfiLog::Rfi)
ProcoreEmail.rfi_due_date_changed(RfiLog::Rfi.last.id)
ProcoreEmail.rfi_reassigned(RfiLog::Rfi.last.id)
ProcoreEmail.rfi_question(RfiLog::Rfi.last.id, RfiLog::RfiThread.last.id, LoginInformation.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last.id, Assigned.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last.id, LoginInformation.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, LoginInformation.last.id)
Company.last
Assigned.last
ProcoreEmail.overdue_rfi_digest(Company.last, Company.Assinged.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, Assignee.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, Assignee.last)
ProcoreEmail.overdue_rfi_digest(Company.last, RfiLog::Assigned.last)
ProcoreEmail.overdue_rfi_digest(Company.last, RfiLog::Assigned.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, RfiLog::Assignee.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, RfiLog::Rfi.Assignee.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, RfiLog::Rfi.Assigned.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, LoginInformation.last.id)
ProcoreEmail.overdue_rfi_digest(Company.last, LoginInformation.last)
ProcoreEmail.overdue_rfi_digest(Company.last, LoginInformation.last).deliver
email = ProcoreEmail.overdue_rfi_digest(Company.last, LoginInformation.last)
email
email.to =  "patrick@procore.com"
email.deliver
quir
exit
n
templay_type
tmp
n
templay_type
n
templay_type
n
nn
n
nn
n
nn
n
nn
n
nn
n
quit
rfis
RfiLog::Item
RfiLog::Item.all
RfiLog::Thread
RfiLog::Thread.all
exit
play -l 326
@questionm
@question.valid?
@question.erros
@question.errors
params
exit
n
nn
n
eixt
exit
icon
office.logo
company
office
icon
project?
icon
office.logo
quir
quit
exit
n
company.pdf_logo_url
quit
exit
thumbnail
quit
thumbnail
company
url_for_immediate_use(company)
n
nn
n
nn
n
exit
exit all
exit
template_type
holder
domain_id
model_name
associated_with
item_log
exit
holder.project? && (parent_holder = holder.company
  q
  quit
(holder.project? && (parent_holder = holder.company))
(associated_with.nil? && domain_id.nil? && !all_templates.first.blank?)
all_templates
n
all_templates
quit
exit
question
question.id
enable_inplace_edit
question.due_date
'due_date'
exit
exit all
quite
quit
exit
exit all
object
field
value
options
exit
quit
n
exit
exit program
exit -program
exit-program
klass
id
field
original_value
new_value
whereami
n
object
new_value
n
status
n
status
n
new_value
n
nn
n
nn
n
nn
n
exit-progoram
exitprogram
exit
current_page
current_path
current_page?
current_page?(project_admin_tab_path)
project_admin_equipment_tab_path(@project)
current_page?
current_page?(project_admin_equipment_tab_path(@project))
exit
n
quit
exit
n
nn
n
association(name).reader(*params)
exit
n
uit
quit
creator = FactoryGirl.create(:login_information, :login => "creator@foo.com")
@creator = FactoryGirl.create(:login_information, :login => "creator@foo.com")
@creator = FactoryGirl.create(:login_information, {:login => "creator@foo.com"})
exit
@creator = FactoryGirl.create(:login_information, {:login => "creator@foo.com"})
@creator = FactoryGirl.create(:login_information, {:login => "blah@foo.com"})
@creator = FactoryGirl.create(:login_information)
@creator.login = creator@foo.com
@creator.login = "creator@foo.com"
@creator.login
exit
play -l 45
@creator = FactoryGirl.create(:login_information)
@creator.login = "login@foo.com"
exit
@header
play n
n
@header
play -l 23-25
play -l 23-26
whereami
exit
@header
@header.all
@header.methods
@header
@header.company_auto_complete
@header.company
@header.provider
@provider
@provider.company_auto_complete
@provider.company_autocomplete
quit
@header
exit
@header
:subtab
subtab = #{params[:subtab]}
xe
subtab = params[:subtab]
subtab_list
@header = @project.rfis.find(params[:id])
subtab_list =
[{selected: true,
    label: I18n.t("views.global.general"),
    disabled: true,
    href: {action: "create",
      controller: "headers",
      id: @header.id,
    subtab: :item }
}]
subtab_list
quir
quit
@header
@header = @project.rfis.find(params[:id])
quit
@project.rfis
@project.rfis.find(params[:id]}
@project.rfis.find(params[:id])
quit
params
@header
exit
quit
@recipient.locale.presence
@project.locale.presence
@company.locale.presence
I18n.locale
quit
c
filename
wuit
quit
xml_string
rfis
rfis = questions(false)
exit
rfis
rfis = questions(false)
play -l 118
exit
pdf_url
xml_string
quit
row
r
r.received_from_login_information_id.name
r.received_from_login_information_id
r.received_from_login_information_id:name
r.received_from_login_information_id.name
r.received_from_login_information_id.last_first_with_company
r.received_from_login_information_id
r
s
r.last_first_with_company
exit
r
r.formatted_ball_in_court_without_company
r.received_from_login_information_id.try(:name, :last_first_with_company, @company.id) || ""
r.formatted_latest_assignee_response_date
r.time_resolved
r.accepted
r.cost_code
r.custom_textfield_1
r.custom_textfield_2
r.schedule_impact_text
r.cost_impact_text
quit
exit
r
r.received_from_login_information
quit
(r.received_from_login_information.try(:name, :last_first_with_company, @company.id) || "")
quit
exit
headers_path
create_communication_header_path
path = create_communication_headers_path
path = create_communication_header_path(header)
path = create_communication_header_path(@header)
path = headers_path, method: :post
path = (headers_path, method: :post)
path = (headers_path, method= :post)
path = (headers_path, method= post)
quit
@header
@project.rfis.find(params[:id])
@header = @project.rfis.find(params[:id])
@header = @project.rfis.find(params[new])
@header = @project.rfis.find(params[:header])
quit
exit
:header
@header
@header.find(params[:id])
quit
@header
quit
@header
quit
@RESPONSE
@response
@response.save
exit
quit
header
exit
header.id
header
exti
exit
quit
@header
@header.new_record?
exit
related_to_table(@header, false, false, false, false)
quit
@header.show_related_communications
header.show_related_communications
show_related_communications
:show_related_communications
exit
header
@header
@header.communication
@header.communications
@header.all
@header.methods
@header.methods | grep email
@header.methods
exit
header.methods | grep "changes"
header.methods | grep change
header.methods
header
@header.methods | grep change
@header.methods | grep "change"
@header.methods 
@header.changed_attributes
@header.previous_changes
@header.previous_changed
@header.changed
@header.changed?
quit
@header
@header.updated
@header.updated?
@header.updated
@header.methods
@header.distribution
@header.distribution.methods
@header.question
@header.question.methods
@header.methods
@headers.skip_emails
@header.methods
@headers.changed_attributes
@headers.changes
@headers.changed
@headers.changed?
@headers.previous_changes
@header
@header.communication_topic
@header.id.methods
@header.emails
@header.prostore_files
@header.prostore_file
@header.prostore
@header.distribution
@header.distribution.methods
@header.attributes
@header.communication
@header.communications
@header.methods.all
@heade.all
@header.all
@header.methods
@header.subject_changed
@header.subject_changed?
@header.subject_change
@header.history
@header.change_history
@header.methods
exit
@header.methods
@header.active_histories
@header.active_histories=
exit
@header
@header.communications
@header.active_histories
@header.methods
@header.attachments
@header.id.methods
@header.related_to
@header.historyable?
@header.ah_record_change
@header.active_history_item_short_description
@header.active_history_item_long_description
@header.ah_record_change
@header.ah_record_change(@user)
@header.ah_parents
@header.ProstoreFile
@header.ActiveHistory
@header.communication
@header.id.communication
@headers
@header.question
@header.question.methods
quit
@headers.related_items.methods
@email
@header.inbound
@header.inbound_email
@header.inbound_email?
@header.inbound_emails
@header.inbound_records
@header.email_exists?
@inbound_emails
@inbound_emails.methods
@header.email_exists?
@change_history
@change_history.count
@changes.count
@changed_attributes
quit
email
@header.email
@email
@email.methods
@email.acts_like>
q
@email.acts_like?
@header.methods do
  grep communication
end
@header.email.collect
@email.collect
@communications
@header.related_to
@change_history
@header.methods
exit
@header
@header.changes
@header.change
@header.changed
@header.changed?
h = Header.new
h = Rfi::Header.new
h.changes
h.accepted = true
h.changes
quit
subtab_hash
subtab_info
quit
subtab_info
view_context
view.context
h
h.view_context
ls h
l h
@header
quit'
quit
@header
@header.active_histories
@header.active_histories.count
@header.active_histories.all
quit
tab = tool.new(engine_name: checklists, is_active: true, is_available: true, required: true, position: 21)
tab = tab.new(engine_name: checklists, is_active: true, is_available: true, required: true, position: 21)
tab = tab.new(engine_name: checklist, is_active: true, is_available: true, required: true, position: 21)
@provide
@provider
provider
current_project
@project
ecit
exi
exit
checklist_tool
checklists_tool
checklists_tab
@project
current_project
quit
sources
n
exit
tag
exit
tag
exit
tag
exit
tag
exit
tag
exit
require bower
pwd
cd app/assets
cd app/asset
ls
cd app
cd assets
ls
quit
exit
Rails.application.config.assets.paths
Rails::Engine::Configuration.paths
Rails::Engine::Configuration.paths?
exit
@project
current_provide
current_provider
current_projecty
current_project
@project = Project.find(1)
ls @project
ls @project | grep tool
ls @project
@project
@project.Tool
exit
@project = Project.find(1)
@project.checklists
@project.checklist_packages
@project.checklist_packages.items
@project.checklist_packages.lists
@project.checklist_packages.list
item = Checklist::Item
item.all
item = Checklist::Item.first
item = Checklist::Item.create(name: "Something")
@project.checklist_packages.all
list = Checklist::List.create
list.find(1).update_attributes(name: "My List")
Checklist::List.find(1).update_attributes(name: "My List")
list = Checklist::List.find(1)
list.items.create(name: "First Item")
@project.checklist_packages.items
@project.checklist_packages.find(1).items
@project.checklist_packages.find(1).items.count
@project.checklist_packages.find(1).items
@project.checklist_packages.lists
@project.checklist_packages.list
package = @project.checklist_packages.find(1)
list
packages = list
list = nil
packages
packages.Checklist::List.all
packages.Checklists::List.all
packages.list.all
packages.lists.all
package = packages
packages = nil
package.Checklist::List.find(1)
package.items
new_item = Checklist::Item.create(name: "Another Item")
new_item = package.Checklist::Item.create(name: "Another Item")
new_item = Checklist::Item.create(name: "Another Item", list_id: 1)
package.item
package.items
reload
reload!
package
Checklist::Item
package = nil
Checklist::Packages.all
Checklist::Package.all
package = Checklist::Package.all
package = Checklist::Package
package = Checklist::Package.first
Checklist::List.all
list = Checklist::List.all
package
list
Checklist:Item.all
Checklist:Items.all
Checklist::Item.all
reload!
package
list
Checklist::List
list.update_attributes(package_id: 1)
list.first.update_attributes(package_id: 1)
new_list = Checklist::List.create(name: "Whatever you want the name to be", package_id: 1)
items
Checklist::Item.all
Checklist::Item.find(2).update_attribute(list_id: 2)
Checklist::Item.find(2).update_attributes(list_id: 2)
Checklist::Item.find(4).update_attributes(list_id: 2)
list
package
list.find(2)
exit
Checklist::Item
exit
q
Checklist::Item.all
Checklist::Sections.all
Checklist::Section.all
Checklist::Package.all
Checklist::List.all
Checklist::Package.create(name: "My Package")
package = Checklist::Package.find(1)
Checklist::Section.create(name: "1st Section")
Checklist::List.create(name: "List A", package_id: 1)
list = Checklist::List.find(1)
section_a = Checklist::Section.create(name: "1st Section", list_id: 1, package_id: 1)
section_b = Checklist::Section.create(name: "2nd Section", list_id: 1, package_id: 1)
item_1A = Checklist::Item.create(name: "1A Item", section_id: 1, list_id: 1, package_id: 1)
item_1A = Checklist::Item.create(title: "1A Item", section_id: 1, list_id: 1, package_id: 1)
Checklist::Item
item_1A = Checklist::Item.create(description: "1A Item", section_id: 1, list_id: 1, package_id: 1)
item_1A = Checklist::Item.create(description: "1A Item", section_id: 1, package_id: 1)
item_2A = Checklist::Item.create(description: "2A Item", section_id: 1, package_id: 1)
item_3A = Checklist::Item.create(description: "3A Item", section_id: 1, package_id: 1)
item_1B = Checklist::Item.create(description: "1B Item", section_id: 2, package_id: 1)
item_2B = Checklist::Item.create(description: "2B Item", section_id: 2, package_id: 1)
q
quirt
quit
Checklist::List.all
Checklist::Sections.all
Checklist::Section.all
item_1A
Checklist::Item.all
Checklist::Item.where(id: 1..3)
Checklist::Item.where(id: 1..3).each { |item| item.update_attributes(section_id: 2)
Checklist::Item.where(id: 1..3).each { |item| item.update_attributes(section_id: 2) }
Checklist::Item.where(id: 4..5).each { |item| item.update_attributes(section_id: 3) }
Checklist::Item.all
Checklist::Section.all
Checklist::Package.all
Checklist::List.all
q
quite
quit
Checklist::List
Checklist::List.all
Checklist::Packages.all
Checklist::Package.all
@project
Checklist::Package.first.update_attributes(project_id: 1)
Checklist::Package.first
Checklist::List.first
Checklist::Packages.all
Checklist::Packages.first
Checklist::Package.first
q
exit
Checklist::List
Checklist::Section.all
Checklist::Item.all
Checklist::Section.all
exit
Checklist::Item
exit
Checklist::Comment
exit
Checklist::Comment
exit
Checklist::Comment
Checklist::Comment.create(body: "This is an example comment", item_id: 14)
Checklist::Item.find(14)
Checklist::Item.all;
Checklist::Item.all
Checklist::Comment.first.update_attributes(item_id: 9)
Checklist::Comment.all
Checklist::Item.all
Checklist::Comment.create(body: Add meee comment, item_id: 7)
Checklist::Comment.create(body: "Add meee comment", item_id: 7)
Checklist::Item.all
Checklist::Comment.all
exit
Checklist::Comment.all
Checklist::Item.all
Checklist::Comment.find(1).update_attributes(item_id: 34)
Checklist::Comment.all
Checklist::Comment.create(body: "Second Comment for Add me", item_id: 7)
exit
Checklist::Comment.all
Checklist::Item.all
Checklist::Comment.all
Checklist::Comment.create(body: "Not working comment", item_id: 35)
exit
Checklist::Item.all
Checklist::Comment.all
exit
eixt
exit
Checklist::Comment
Checklist::Comment.all
Checklist::Item.all
Checklist::Comment.create(body: "New Item Comment", item_id: 36) 
Checklist::Comment.first.update_attributes(package_id: 1)
Checklist::Comment.all
Checklist::Item.all
Checklist::Comment.create(body: "Add meee comment", item_id: 7, package_id: 1)) 
Checklist::Comment.create(body: "Add meee comment", item_id: 7, package_id: 1)
Checklist::Comment.all
Checklist::Comment.find(9)
Checklist::Comment.all
Checklist::Comment.destroy_all
Checklist::Comment.all
Checklist::Item.all
Checklist::Item.destroy_all
Checklist::Item.all
Checklist::Comment.all
Checklist::Comment.destroy_all
Checklist::Item.destroy_all
exit
Checklist::Item.destroy_all
Checklist::Comment.all
Checklist::Item.destroy_all
Checklist::Comment.all
Checklist::Comment.destroy_all
Checklist::Comment.all
Checklist::Comment.destroy_all
Checklist::Item.destroy_all
Checklist::Comment.destroy_all
Checklist::Item.destroy_all
Checklist::Item.all
Checklist::Item
Checklist::Item.all
exigt
exit
Checklist::Item.destroy_all
Checklist::Comment.destroy_all
Checklist::Section.destroy_all
Checklist::Package
Checklist::Package.all
Checklist::Section
Checklist::Item
Checklist::Item.all
exit
gs
exit
:qw
@project
@project = Project.find(10
@project = Project.find(1)
@project
@project.checklist_lists.select([:id, :name]).to_json.html_safe
@project.checklist_lists.select([:id, :name])
@project.checklist_lists.select([:id, :name]).to_json
@project.checklist_lists.select([:id, :name])
@project.checklist_lists.select([:id, :name]).to_json
@project.checklist_lists
@project.checklist_lists.first
:q
exit
Checklist::List.all
Checklist::List.create(name: List 1)
Checklist::List.create(name: "List 1")
gs
Checklist::List.all
Checklist::Section
Checklist::Section.all
Checklist::Section.destroya_all
Checklist::Section.destroy_all
gs
Checklist::List.all
Checklist::List.first.update_attributes(project_id: 1)
Checklist::Item.all
Checklist::Item.destroy_all
Checklist::Comment.destroy_all
gs
Checklist::Item.all
Checklist::Comment.all
Checklist::Section.all
Checklist::List.all
Checklist::Section
Checklist::List
Checklist::Package
Checklist::Section
Checklist::item
Checklist::Item
Checklist::Comment
c
exit
Checklist::Item
Checklist::Comment
Checklist::Section
exit
Checklist::Item
Checklist::Section
Checklist::List
exit
@project = Project.find(1)
Tool
tab = Tool.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
tab.save
tab.update_attributes(provider_id: @project.id)
tab.update_attributes(provider: @project)
tab = Tool.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21, provider: @project)
tab.save
tab = Tool.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21, provider_type: @project)
tab = Tool.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21, provider_type: 'Project')
tab = Tool.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21, provider_type: @project)
Tool.all
checklist_tab = Tool.create(engine_name: "checklists
checklist_tab = @project.Tool.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
@project.methods
checklist_tab = @project.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
checklist_tab = @project.Tool.new(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
checklist_tab = @project.new(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
checklist_tab = @project.Tools.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
checklist_tab = @project.tools.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
checklist_tab.save
checklist_tab = @project.tools.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 21)
checklist_tab = @project.tools.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 22)
checklist_tab = @project.tools.create(engine_name: "Checklists", is_active: true, is_available: true, required: true, position: 100)
checklist_tab.save
@project.tools
checklist_tab = @project.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 20)
@project.tools.where(id: nil)
@project.tools.
@project.tools
@project.tools.where(engine_name: "Checklist")
@project.tools.where(engine_name: "Checklists")
exit
Checklist::Item.comment
Checklist::Item
Checklist::Section
Checklist::List
exit
Checklist::List.create(name: "List 1")
Checklist::Section.create(name: "Section 1", list_id: 1)
Checklist::Section.all
Checklist::Section.first.update_attributes(project_id: 1)
Checklist::List.first.update_attributes(project_id: 1)
Checklist::Section.create(name: "Section 1", list_id: 1)
Checklist::Section.all
Checklist::Section.create(name: "Section 1", list_id: 1,)
Checklist::Section.create(name: "Section 1", list_id: 1)
Project.all
exit
Project.all
Company.all
Company.where(name: "The Casper Collection"
Company.where(name: "The Casper Collection")
Company.where(name: "The Casper Collection").destroy_all
Company.all
Project.all
@project
@project = Project.find(3)
checklist_tab = @project.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 3)
Checklist::List.all
Checklist::List.first.update_attributes(project_id: 3)
Checklist::List.all
Checklist::Section
Checklist::Section.create(name: "Section 1", list_id: 1)
Checklist::Section
Checklist::Section.create(name: "Section 1", list_id: 1, position: 1)
Checklist::Section
Checklist::Section.all
Checklist::List.all
Vendor
Vendor.create(project_id: 3, first_name: "Catt", last_name: "Masper")
Vendor.create(first_name: "Catt", last_name: "Masper")
@project
@project.vendors.create(first_name: "Catt", last_name: "Masper")   
Vendor.all
Vendor.destroy_all
Vendor.all
@project
@project.vendors
@project.vendors.create(last_name: "Masper", first_name: "Catt")
exit
Checklist::List
exit
Checklist::List.first.inspectors
Checklist::List.first.inspectees
Checklist::List.specification_sections
Checklist::List.first.specification_sections
Checklist::List.first.specification_section
Checklist::Item.all
exit'
exit
Checklist::List
Checklist::List.all
Checklist::List.first.update_attributes(tool_id: 21)
Checklist::List.all
exit
Checklist::List
Checklist::List.all
@compnay = Company.find(13)
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 24)
@company.tools
@company.tool
@company.tabs
@company
@company = Company.find(12)
@company = Company.find(13)
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 24)
company_checklist.valid?
company_checklist.save
checklist_tab
company_checklist
Checklist::List.create(name: "List 1", tool_id: 216)
Checklist::List
Checklist::List.create(name: "Pierce's List", toold_id: 216)
Checklist::List.create(name: "Pierce's List", tool_id: 216)
Checklist::List.all
Checklist::List.methods
ls Checklist::List
Checklist::List.create(name: "Pierce's List", tool_id: 216)
Checklist::List.create(name: "Pierce's List", tool_id: 216, login_information: LoginInformation.last)
ls Checklist::List
Checklist::List
exit
Checklist::List.destroy_all
Checklist::List.create(name: "Pierce's List", tool_id: 216, created_by: LoginInformation.last)
Checklist::List
exit
Checklist::List
Checklist::List.create(name: "Pierce's List", tool_id: 216, created_by_id: LoginInformation.last)
Checklist::List
Checklist::List.create(name: "Pierce's List", tool_id: 216, created_by_id: LoginInformation.last.id)
Checklist::List.create(name: "Someone's List", tool_id: 216, created_by_id: LoginInformation.last.id)
@project.find(3).tools
@project.find(1).toold
@project.find(1).tools
@project = Project.find(1)
@project = Project.find(3)
@project.tools
@project.tools.where(name: "checklists"
@project.tools.where(name: "checklists")
Checklist::List.all
ChecklistPolicy
ChecklistPolicy.new
ChecklistPolicy.new(@company, LoginInformation.last, Checklist::List.first)
@compnay
@company
@company = Company.find(13)
@company.tools
@company.tools.where(position: 24)
exit
@company
@project
@user
@list
Checklist::List.all
@company
@company.tools.where(tool_id: 216)
@company.tools.where(id: 216)
@company.tools
exit
Checklist::List
Checklist::List.all
Checklist::Item
Checklist::List
exit
@project = Project.find(3)
@project.checklists.create(name: "Mario's List", created_by_id: LoginInformation.first)
Checklist::List
Checklist::List.create(name: "Mario's List", tool_id: 195, created_by_id: LoginInformation.first)
Checklist::List.all
Checklist::List.create(name: "Mario's List", tool_id: 195, created_by_id: LoginInformation.first.id)
Checklist::List.create(name: "Luigi's List", tool_id: 195, created_by_id: LoginInformation.first.id)
Checklist::List.all
@company = Company.find(13)
@project = Project.find(3)
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11)
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11, created_by_id: LoginInformation.first.id)
Checklist
company_checklist = @company.tools.create(engine_name: "checklist", is_active: true, is_available: true, required: true, position: 11)
Tool::Checklist
Tool::Checklists
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 20)
@company.tools
@company.tools.where(engine_name: "checklists").destroy_all
@company.tools.where(engine_name: "checklist").destroy_all
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 14)
@company.tools
@company.tools.where(tool_id: 216).destroy_all
@company.tools.where(id: 216).destroy_all
@company.tools.where(id: nil).destroy_all
company_checklist = @company.tool.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 14)
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 14)
company_checklist.valid?
@company.tools.all
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11)
Tools::Checklists
Tools::Checklist
Checklist
@company.tools.all
Tool
Tools::Checklists
Tool
@company
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11)
company_checklist.errors
company_checklist = @company.tools.create(engine_name: "inspection_checklists", is_active: true, is_available: true, required: true, position: 11)
project_checklist = @project.tools.create(engine_name: "inspection_checklists", is_active: true, is_available: true, required: true, position: 21)
company_checklist.save && project_checklist.save
@project.tools
@project.tools.where(engine_name: "inspection_checklists"
@project.tools.where(engine_name: "inspection_checklists")
Checklist::List.all
@company.tools.where(engine_name: "inspection_checklists").update_attributes(engine_name: "checklists")
@company.tools.where(engine_name: "inspection_checklists").first.update_attributes(engine_name: "checklists")
reload!
@company.tools.where(engine_name: "inspection_checklists").first.update_attributes(engine_name: "checklists")
@company.tools.where(engine_name: "inspection_checklists").destroy_all
@project.tools.where(engine_name: "inspection_checklists").destroy_all
project_checklist = @project.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 21)
project_checklist.errors
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11)
@project.tools.all
@project.tools.where(id: 195).destroy_all
project_checklist = @project.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 21)
project_checklist.erros
project_checklist.errors
project_checklist = @project.tools.create(engine_name: "inspection_checklists", is_active: true, is_available: true, required: true, position: 21)
exit
@project = Project.find(3)
@company = Company.find(13)
@project.tools.all
@project.tools.where(engine_name: "inspection_checklists").first.update_attributes(engine_name: "checklists")
^project^company^
@company.tools.where(engine_name: "inspection_checklists").first.update_attributes(engine_name: "checklists")
@company.tools.all
company_checklist = @company.tools.create(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11)
Checklist::List.find(4).update_attributes(tool_id: 220)
Checklist::List.find(5).update_attributes(tool_id: 220)
Checklist::List.all
Checklist::List.find(2).update_attributes(tool_id: 219)
Checklist::List.find(3).update_attributes(tool_id: 219)
exit
Checklist::List.all
Checklist::List
Checklist::List.destroy_all
Checklist::List.all
Checklist::List
Checklist::List.all
Checklist::Sections.all
Checklist::Section.all
Checklist::List.destroy_all
Checklist::List
Checklist::List.all
exit
Checklist::List
Checklist::List.all
exit
Checklist::List
Checklist::List.all
Checklist::ListTemplate.all
gs
Checklist::ListTemplate.all
exit
Checklist::List
Checklist::ListTemplate
reload!
Checklist::ListTemplate
Checklist::List
exit
Checklist::List
Checklist::ListTemplate.all
exit
Checklist::ListTempalte
Checklist::ListTemplate
Checklist::List
Checklist::ListTemplate.all
@project = Project.find(3)
@project.tools.where(name: "Inspections")
@project.tools.where(name: "Inspections").first
@project.tools.where(name: "Inspections").all
@project.tools
@project.tools.where(engine_name: "Inspections").all
@project.tools.where(engine_name: "inspections").all
@project.tools
Checklist::ListTemplate.where(id: 41).update_attributes(tool_id: 219)
Checklist::ListTemplate.find(41).update_attributes(tool_id: 219)
Checklist::ListTemplate.find(41)
Checklist::ListTempalte
Checklist::ListTemplate
ChecklistItemHistory
Checklist::ItemHistory
@project = Project.find(2)
@project = Project.find(1)
@project.tool(engine_name: "checklists", is_active: true, is_available: ture, is_required: true, position: 22) 
@project.tool(engine_name: "checklists", is_active: true, is_available: true, is_required: true, position: 22) 
@project.tool.new(engine_name: "checklists", is_active: true, is_available: true, is_required: true, position: 22) 
@project.tools.new(engine_name: "checklists", is_active: true, is_available: true, is_required: true, position: 22) 
@project.tools.new(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 22) 
project_tool=@project.tools.new(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 22) 
project_tool.valid?
project_tool.save
@company=Company.find(2)
company_tool =  @company.tools.new(engine_name: "checklists", is_active: true, is_available: true, required: true, position: 11) 
company_tool.save
exit
Checklist::List
exit
Tool.all
Checklist::List.all
Checklist::Item
Checklist::Section
Checklist::List
exit
@user.admin?(@provider, @domain)
me =  @user.admin?(@provider, @domain)
me
@current_tool.id 
exit
Checklist::ListTemplate
exit
Checklist::Item
exit
Tools.all
Tool.all
Tool.find(id: 54)
Tool.find(params[id: 54])
Tool.find(54)
Tool.find(54).update_attribute(is_active: true)
Tool.find(54).update_attributed(is_active: true)
Tool.find(54).update_attributes(is_active: true)
Tool.find(55).update_attributes(is_active: true)
Tool.all
Tool.find(54).update_attributes(is_available: true)
Tool.find(55).update_attributes(is_available: true)
exit
